DECISIÓN DE DISEÑO SOBRE EL ERROR 2:

Para saber si las asignaciones sobre los parámetros de subprogramas son adecuadas necesitamos de un almacén
que contenga tantas entradas como subprogramas tenga nuestro programa.
Por cada una de estas entradas nos encontraremos con un almacén que contiene las variables y tipos de
dicho subprograma, dividiéndose en tres categorías: PARAM (las que se esperan recibir como parámetros), DEV
(las que se esperan devolver) y CUERPO (las declaradas en variables).

 Almacén k de variables de subprogramas:
 ------------------------------------------------------------
 func1   |      PARAM             DEV             CUERPO
 (f1)    |---------------------------------------------------
         |variables tipos | variables tipos | variables tipos
         |
         |
 ------------------------------------------------------------
 func2   |      PARAM             DEV             CUERPO
 (f2)    |---------------------------------------------------
         |variables tipos | variables tipos | variables tipos
         |
         |
  .
  .
 (fn) n=num de funciones

 programa: PROGRAMA variables k=subprogramas instrucciones EOF;

 (parámetro de salida k)
 subprogramas: SUBPROGRAMAS (f=declaracion_subprogramas {almacena f en k})*;

 (parámetro de salida f)
 declaracion_subprogramas: funcion
                         | procedimiento
                         ;

 (parámetro de salida f)
 funcion: FUNCION variable PA (PARAM=params)? PC RETURN PA DEV=params PC CUERPO=variables instrucciones FFUNCION;
{Almacena en f PARAM, DEV y CUERPO}

(parámetro de salida f)
 procedimiento: PROCEDIMIENTO variable PA (PARAM=params)? PC CUERPO=variables instrucciones FPROCEDIMIENTO;
{Almacena en f PARAM, DEV (vacío) y CUERPO}

(parámetro de salida PARAM o DEV)
 params: t=tipos r=variable {Almacena en PARAM o DEV t y r}
       | t=tipos r=variable COMA params {Almacena en PARAM o DEV t y r} //recursividad revisar
       ;

 (parámetro de salida CUERPO)
 variables: VARIABLES (m=declaracion_variables)*; {Almacena en CUERPO m}
 ... (obtención de m vista en la decisión de diseño del error 1)